package com.example.runningtracker.ui.screens

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.runningtracker.data.Run
import com.example.runningtracker.data.RunDatabase
import com.google.android.gms.maps.model.LatLng
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.launch

class RunViewModel(application: Application) : AndroidViewModel(application) {
    private val runDao = RunDatabase.getDatabase(application).runDao()

    val allRuns: Flow<List<Run>> = runDao.getAllRuns() // Live data of all runs

    var currentRun: Run? = null

    fun startRun(distance: Int, time: Long, speed: Float) {
        currentRun = Run(
            id = 0, // Assuming this is auto-generated by the database
            distanceInMeters = distance,
            timeInMillis = time,
            avgSpeed = speed,
            routeCoordinates = mutableListOf() // Pass an empty list or actual coordinates
        )
    }

    fun updateRun(distance: Int, time: Long, speed: Float) {
        currentRun?.apply {
            this.distanceInMeters = distance
            this.timeInMillis = time
            this.avgSpeed = speed
        }
    }

    // Append a new LatLng point to the run's routeCoordinates
    fun appendLocation(latitude: Double, longitude: Double) {
        currentRun?.routeCoordinates?.let {
            it.add(LatLng(latitude, longitude)) // Add new coordinates
        }
    }

    fun stopRun() {
        currentRun?.let { run ->
            viewModelScope.launch {
                runDao.insertRun(run)
            }
        }
    }
}

